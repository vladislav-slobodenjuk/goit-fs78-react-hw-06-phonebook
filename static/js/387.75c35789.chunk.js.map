{"version":3,"file":"static/js/387.75c35789.chunk.js","mappings":"wQAEaA,E,OAAaC,GAAAA,GAAH,4P,SCyCvB,EAtCa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAUA,OARAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,uGACwBC,EAAAA,EAAAA,IAAWL,EAAS,WAD5C,gBACSE,EADT,EACSA,KACRC,EAAQD,GAFT,0CAAD,EAKD,GAAE,CAACF,KAGF,2BACGE,IACC,SAACJ,EAAD,UACGI,EAAKI,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,KACvBC,EAASF,EAAY,0CACYA,GACnC,4DAEJ,OACE,2BACE,gBAAKG,IAAKD,EAAQE,IAAKH,EAAMI,QAAQ,UACrC,uBAAIJ,MAFGF,EAKZ,MAGY,IAAhBL,EAAKY,SAAgB,uBAAG,wCAG9B,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(136px, 1fr));\n  gap: 16px;\n\n  @media screen and (min-width: 1280px) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 32px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { searchById } from 'services/api';\nimport { StyledList } from './Cast.styled';\n\nconst Cast = ({ movieId }) => {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const { cast } = await searchById(movieId, 'credits');\n      setCast(cast);\n      // console.log(cast);\n    })();\n  }, [movieId]);\n\n  return (\n    <div>\n      {cast && (\n        <StyledList>\n          {cast.map(({ id, profile_path, name }) => {\n            const imgUrl = profile_path\n              ? `https://image.tmdb.org/t/p/w342/${profile_path}`\n              : 'https://www.tgv.com.my/assets/images/404/movie-poster.jpg';\n\n            return (\n              <li key={id}>\n                <img src={imgUrl} alt={name} loading=\"lazy\" />\n                <p>{name}</p>\n              </li>\n            );\n          })}\n        </StyledList>\n      )}\n      {cast.length === 0 && <p>We don't have cast for this movie</p>}\n    </div>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n};\n\nexport default Cast;\n"],"names":["StyledList","styled","movieId","useState","cast","setCast","useEffect","searchById","map","id","profile_path","name","imgUrl","src","alt","loading","length"],"sourceRoot":""}